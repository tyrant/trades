:javascript
  $(document).ready(function() {
  
    $("#choose_trader").submit(function(event) {
      $.getJSON('/traders/find.html', $(this).serialize(), function(data) {
        $("#trader_results").html("");
        $.each(data, function(index, trader) {
          if (trader.id != 0) {
            $("#trader_results").append('<li class="pointer" id="trader_' + trader.id + '">' + trader.name + '</li>');
            $("#trader_" + trader.id).click(function() {
              if ($("#trader_x").parent().attr('id') == $(this).attr('id')) {
                $("#trader_x").remove();
                $("#job_trader_id").val('');
              } else {
                $("#trader_x").remove();
                $(this).html($(this).html() + '<span id="trader_x"> X</span>');
           
                // Whack the *currently existing* trader id onto the job form.
                $("#job_trader_id").val(trader.id);
              }
            });
          } else {
            $("#trader_results").append('<li>' + trader.name + '</li>');
          }
        });
        $("#trader_results").append('<li>Not on the list? <a href="#" id="toggle_new_trader">Add them!</a></li>');
        $("#toggle_new_trader").click(function() {
          $("#new_trader_div").toggle();
          var self = $(this);
          if (self.html() == "Add them!")
            self.html("Close this window");
          else if (self.html() == "Close this window") 
            self.html("Add them!");
          return false;
        });
      });
      return false;
    });

    // Custom submit - use callback to whack the *newly created* trader id onto the job form.
    /*$("#new_trader").submit(function(event) {
      $.post('/traders/create.json', $(this).serialize(), function(response) {
        $("#job_trader_id").val(response.id);
        $("#trader_submit").val("Trader created!");
        $("#trader_submit").attr('disabled', 'disabled');
      }, 'json');
      return false;
    });*/
    
    $("#new_review").submit(function(event) {
      $.post('/review/create_job_review.json', $(this).serialize(), function(response) {
        $("#review_submit").val("Review created!");
        $("#review_submit").attr('disabled', 'disabled');
      }, 'json');
      return false;
    });
    
    // Mapplet!
    var map = new google.maps.Map(document.getElementById("map_canvas"), {
      zoom: 5,
      center: new google.maps.LatLng(-41.079351, 173.144531),
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });
    
    var geocoder = new google.maps.Geocoder();
    var markers = [];    
    $("#address_button").click(function() {
      geocoder.geocode({'address': $("#address").val()}, function(results, status) {
        $("#address_feedback").html("");
        for (i in markers) {
          markers[i].setMap(null);
        }
        if (status == google.maps.GeocoderStatus.OK) {
          for (i in results) {
            marker = new google.maps.Marker({
              map: map,
              position: results[i].geometry.location
            });
            marker.formatted_address = results[i].formatted_address
            markers.push(marker);
            google.maps.event.addListener(marker, 'click', function() {
              $("#address_feedback").html("Address selected at: <em>" + marker.formatted_address + "</em>");
            });
          }
        } else if (status == google.maps.GeocoderStatus.ZERO_RESULTS) {
          $("#address_feedback").html("No results! Try being a bit more specific.");
        } else {
          $("#address_feedback").html("Error: " + status);
        }
      });
    });
  });
  
  
%h1 Quick Review

- if current_user.instance_of? Trader
  %input{:type => 'button', :value => 'I did this job!'}
  
%h2#step_1 (Step 1 of 3) Choose a trader
%form#choose_trader{:name => 'choose_trader', :action => '/', :method => 'get', :class => 'formtastic'}
  %fieldset{:class => 'inputs'}
    %input{:type => 'text', :id => 'trader_text', :name => 'trader_text'}
    %input{:type => 'submit', :value => 'Search'}
%ul#trader_results


-# New Trader form, shown and submitted only when the Select Trader list doesn't have the trader the user wants.
#new_trader_div{:style => "display:none;"}
  %h2#step_1a (Step 1-and-a-bit of 3) Create a new trader
  = semantic_form_for @trader, :remote => true do |f|
    %ul
      - @trader.errors.full_messages.each do |m|
        %li= m
    = f.inputs "Your trader isn't listed above - add them!" do
      = f.input :first_name
      = f.input :last_name
      = f.input :question
      %strong What's this 'question' business?
      %br
      The trader you're creating a profile for may one day come across this review you're writing, and want to comment on the review, as the trader. The only person really suited to confirming their identity is you. To do this, simply write a security question in the text field above, that only the trader will know. When the trader clicks on the 'I did this job!' button on this page (which is visible only to people logged in as traders), they'll be shown the question you wrote, and answer it. Their answer will be emailed to you, and it's up to to you say if the answer is right or not, by clicking on one of the Yes/No buttons on the email. If "Yes", the website will authenticate them as the trader.
    = f.hidden_field :sprightly, :value => '0'
    = f.submit "Create a new trader"

%h2#step_2 (Step 2 of 3) Describe the job
= semantic_form_for @job, :remote => true do |f|
  %ul
    - @job.errors.full_messages.each do |m|
      %li= m
  = f.inputs "Job info" do
    = f.input :title
    = f.input :description
    = f.input :trader_id, :as => :hidden
    = f.inputs :latitude, :longitude, :for => :address, :as => :hidden
    = f.semantic_fields_for :address do |a|
      = a.input :latitude, :as => :hidden
      = a.input :longitude, :as => :hidden
    %li.required
      %label{:for => 'address'}
        Address
      %input#address{:type => 'text'}
      %input#address_button{:type => 'button', :value => 'Get Address'}
      %span#address_feedback
      #map_canvas
    = f.submit "Create a new job"
  

%h2#step_3 (Step 3 of 3) Review it!
#trader_reviewed
  = semantic_form_for @review, :remote => true do |f|
    %ul
      - @review.errors.full_messages.each do |m|
        %li= m
    = f.inputs "Review info" do
      = f.inputs :title, :description
      = f.input :mark, :as => :select, :collection => Review.marks.map{ |m| [m, m]}
      = f.input :reviewable, :as => :hidden, :value => "Job"
      = f.input :reviewable_id, :as => :hidden
      = f.submit 'Create review'
  

