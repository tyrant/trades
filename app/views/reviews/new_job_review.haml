:javascript
  $(document).ready(function() {
  
    $("#choose_trader").submit(function(event) {
      $.getJSON('/traders/find.html', $(this).serialize(), function(data) {
        $("#trader_results").html("");
        $.each(data, function(index, trader) {
          if (trader.id != 0) {
            $("#trader_results").append('<li class="pointer" id="trader_' + trader.id + '">' + trader.name + '</li>');
            $("#trader_" + trader.id).click(function() {
              if ($("#trader_x").parent().attr('id') == $(this).attr('id')) {
                $("#trader_x").remove();
                $("#job_trader_id").val('');
              } else {
                $("#trader_x").remove();
                $(this).html($(this).html() + '<span id="trader_x"> X</span>');
           
                // Whack the *currently existing* trader id onto the job form.
                $("#job_trader_id").val(trader.id);
              }
            });
          } else {
            $("#trader_results").append('<li>' + trader.name + '</li>');
          }
        });
        $("#trader_results").append('<li>Not on the list? <a href="#" id="toggle_new_trader">Add them!</a></li>');
        $("#toggle_new_trader").click(function() {
          $("#new_trader_div").toggle();
          var self = $(this);
          if (self.html() == "Add them!")
            self.html("Close this window");
          else if (self.html() == "Close this window") 
            self.html("Add them!");
          return false;
        });
      });
      return false;
    });

    // Custom submit - use callback to whack the *newly created* trader id onto the job form.
    /*$("#new_trader").submit(function(event) {
      $.post('/traders/create.json', $(this).serialize(), function(response) {
        $("#job_trader_id").val(response.id);
        $("#trader_submit").val("Trader created!");
        $("#trader_submit").attr('disabled', 'disabled');
      }, 'json');
      return false;
    });*/
    
    // Mapplet!
    var map = new google.maps.Map(document.getElementById("map_canvas"), {
      zoom: 5,
      center: new google.maps.LatLng(-41.079351, 173.144531),
      mapTypeId: google.maps.MapTypeId.ROADMAP
    });
    
    var geocoder = new google.maps.Geocoder();
    var markers = [];    
    $("#address_button").click(function() {
      geocoder.geocode({'address': $("#address").val()}, function(results, status) {
        $("#address_feedback").html("");
        for (i in markers) {
          markers[i].setMap(null);
        }
        if (status == google.maps.GeocoderStatus.OK) {
          for (i in results) {
            marker = new google.maps.Marker({
              map: map,
              position: results[i].geometry.location
            });
            marker.formatted_address = results[i].formatted_address
            markers.push(marker);
            google.maps.event.addListener(marker, 'click', function() {
              $("#address_feedback").html("Address selected at: <em>" + marker.formatted_address + "</em>");
            });
          }
          // Only one result? Click it.
          if (markers.length == 1) {
            //alert(markers.length);
            markers[0].click();
          }
        } else if (status == google.maps.GeocoderStatus.ZERO_RESULTS) {
          $("#address_feedback").html("No results! Try being a bit more specific.");
        } else {
          $("#address_feedback").html("Error: " + status);
        }
      });
    });

    // Uploadify
    $("#job_upload").uploadify({
      uploader: '/uploadify/uploadify.swf',
      script: '/images',
      cancelImg: '/uploadify/cancel.png',
      auto: true,
      onSelect: function(event, ID, fileObj) {
        // Generate unique token and append to job form hidden field and image upload data.
        var new_token = hex_sha1(Date.now() + 'b');
        var cur_tokens = $("#image_tokens").val();
        if (cur_tokens) cur_tokens = cur_tokens.split(',');
        else cur_tokens = [];
        cur_tokens.push(new_token);
        $("#image_tokens").val(cur_tokens.join(','));
        $("#job_upload").uploadifySettings('scriptData', {token: new_token});
      },
      onComplete: function(event, ID, fileObj, response, data) {
        $("#job_thumbs").append('<li><img src="' + response + '" /></li>');
      },
      queueSizeLimit: 5
    });

    $("#new_job_image").click(function() {
       
    });
  });
  
  
%h1 Quick Review

- if current_user.instance_of? Trader and @job.trader.nil?
  %input{:type => 'button', :value => 'I did this job!'}
  
%h2#step_1 (Step 1 of 3) Choose a trader
%p
  %strong TODO
  %em The list of returned Traders needs to have sorting options - sort by relevance (algorithm to deduce relevance TBD), distance from current location (either taken from the Google Map below or deduced by IP), average fee, reputation? Filtered by name, profession. Presentation: bullet list, first+last names, thumbnail image, link to Trader profile page. Click on Trader thumbnail to select for job below.
%form#choose_trader{:name => 'choose_trader', :action => '/', :method => 'get', :class => 'formtastic'}
  %fieldset{:class => 'inputs'}
    %input{:type => 'text', :id => 'trader_text', :name => 'trader_text'}
    %input{:type => 'submit', :value => 'Search'}

%ul#trader_results


-# New Trader form, shown and submitted only when the Select Trader list doesn't have the trader the user wants.
#new_trader_div{:style => "display:none;"}
  %h2#step_1a (Step 1-and-a-bit of 3) Create a new trader
  = semantic_form_for @trader, :remote => true do |f|
    %ul
      - @trader.errors.full_messages.each do |m|
        %li= m
    = f.inputs "Your trader isn't listed above - add them!" do
      = f.input :first_name
      = f.input :last_name
      = f.input :question
      %strong What's this 'question' business?
      %br
      The trader you're creating a profile for may one day come across this review you're writing, and want to comment on the review, as the trader. The only person really suited to confirming their identity is you. To do this, simply write a security question in the text field above, that only the trader will know. When the trader clicks on the 'I did this job!' button on this page (which is visible only to people logged in as traders), they'll be shown the question you wrote, and answer it. Their answer will be emailed to you, and it's up to to you say if the answer is right or not, by clicking on one of the Yes/No buttons on the email. If "Yes", the website will authenticate them as the trader.
    = f.hidden_field :sprightly, :value => '0'
    = f.submit "Create a new trader"

%h2#step_2 (Step 2 of 3) Describe the job
%p
  %strong TODO
  %em Title and Description done - jobs are Imageable and Videoable too. Find relevant jQuery plugins to handle and upload both. Rails has the Paperclip gem, which handles images very nicely - verify that it can do videos too. Google map - more polishing. Add animation for adding markers, plus, say, 200ms delay between adding each; if only one marker appears, then automatically select it; make it more clear to the user that they have to click on a marker to select that address. Also, Devise error when creating Job - template not found? What's up with that?
= semantic_form_for @job, :remote => true, :html => { :multipart => true } do |f|
  %ul
    - @job.errors.full_messages.each do |m|
      %li= m
  = f.inputs "Job info" do
    = f.input :title
    = f.input :description
    = f.input :trader_id, :as => :hidden
    = f.inputs :latitude, :longitude, :for => :address, :as => :hidden
    = f.semantic_fields_for :address do |a|
      = a.input :latitude, :as => :hidden
      = a.input :longitude, :as => :hidden
    %li.required
      %label{:for => 'address'} Address
      %input#address{:type => 'text'}
      %input#address_button{:type => 'button', :value => 'Get Address'}
      %span#address_feedback
      #map_canvas
    %li.required
      %label{:for => 'image'} Images
    %input#job_upload{:type => 'file'}
    %br
    %input#image_tokens{:name => 'job[image_tokens]', :type => 'hidden', :value => ''}
    %ul#job_thumbs
    = f.submit "Create a new job"
  

%h2#step_3 (Step 3 of 3) Review it!
%p
  %strong TODO
  %em Similar deal with Reviews as Jobs - get Imageable and Videoable cranking along.
#trader_reviewed
  = semantic_form_for @review, :remote => true do |f|
    %ul
      - @review.errors.full_messages.each do |m|
        %li= m
    = f.inputs "Review info" do
      = f.inputs :title, :description
      = f.input :mark, :as => :select, :collection => Review.marks.map{ |m| [m, m]}
      = f.input :reviewable, :as => :hidden, :value => "Job"
      = f.input :reviewable_id, :as => :hidden
      = f.submit 'Create review'
  

